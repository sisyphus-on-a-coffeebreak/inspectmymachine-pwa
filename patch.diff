*** a/src/components/ThumbnailGrid.tsx
--- b/src/components/ThumbnailGrid.tsx
@@
-import { useState, useCallback } from "react";
+import { useState, useCallback } from "react";
+import { X } from "lucide-react";
+
+type ThumbItem = { key: string; url: string };
+interface Props {
+  items: ThumbItem[];
+  onDelete?: (key: string) => void;
+}
 
 function withCacheBuster(url: string, n: number) {
   if (!url) return url;
   const sep = url.includes("?") ? "&" : "?";
   return \`\${url}\${sep}cb=\${n}\`;
 }
 
-export default function ThumbnailGrid(props: {
-  items: { key: string; url: string }[];
-  onDelete?: (key: string) => void;
-}) {
-  const { items, onDelete } = props;
-  const [retryMap, setRetryMap] = useState<Record<string, number>>({});
+export default function ThumbnailGrid({ items, onDelete }: Props) {
+  const [retryMap, setRetryMap] = useState<Record<string, number>>({});
   const bump = useCallback((key: string) => {
     setRetryMap((m) => ({ ...m, [key]: (m[key] ?? 0) + 1 }));
   }, []);
 
   return (
-    <div className="grid grid-cols-3 gap-3">
+    <div className="grid grid-cols-3 gap-3">
       {items.map(({ key, url }) => (
-        <div key={key} className="relative group">
-          <img src={withCacheBuster(url, retryMap[key] ?? 0)} className="w-full h-28 object-cover rounded-md" onError={() => bump(key)} />
-          {onDelete && (
-            <button className="absolute top-1 right-1 opacity-100 group-hover:opacity-100 bg-black/60 text-white px-2 py-1 rounded" onClick={() => onDelete(key)} aria-label="Delete photo">âœ•</button>
-          )}
-        </div>
+        <div key={key} className="relative group overflow-hidden rounded-md">
+          <img
+            src={withCacheBuster(url, retryMap[key] ?? 0)}
+            className="w-full h-28 object-cover pointer-events-none select-none"
+            onError={() => bump(key)}
+            alt=""
+          />
+          <button
+            type="button"
+            data-testid="thumb-delete"
+            aria-label="Delete photo"
+            onClick={() => onDelete?.(key)}
+            disabled={!onDelete}
+            className="absolute top-1.5 right-1.5 z-20 h-11 w-11 rounded-full bg-black/70 text-white flex items-center justify-center shadow ring-1 ring-white/20 pointer-events-auto disabled:opacity-60"
+          >
+            <X className="h-5 w-5" />
+          </button>
+        </div>
       ))}
     </div>
   );
 }
